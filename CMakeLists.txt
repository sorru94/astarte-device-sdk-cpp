# (C) Copyright 2025, SECO Mind Srl
#
# SPDX-License-Identifier: Apache-2.0

cmake_minimum_required(VERSION 3.15)

project(
  AstarteDeviceSDKcpp
  VERSION 0.5.99
  LANGUAGES CXX)

include(FetchContent)
include(cmake/AstarteGRPCTransport.cmake)

# Setup libraries
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

# --- Generic Configuration Options ---
option(ASTARTE_TRANSPORT_GRPC "Enable gRPC transport" OFF)
option(ASTARTE_ENABLE_FORMAT "Enable formatting of Astarte device data" OFF)
option(ASTARTE_PUBLIC_SPDLOG_DEP "Make spdlog dependency public" OFF)

message(STATUS "--------------------------------------------------")
message(STATUS "Astarte SDK Configuration:")
message(STATUS "  Generic Options:")
message(STATUS "    ASTARTE_ENABLE_FORMAT:       ${ASTARTE_ENABLE_FORMAT}")
message(STATUS "    ASTARTE_PUBLIC_SPDLOG_DEP:   ${ASTARTE_PUBLIC_SPDLOG_DEP}")
message(STATUS "  Transports:")
message(STATUS "    gRPC enabled:                ${ASTARTE_TRANSPORT_GRPC}")

if(ASTARTE_TRANSPORT_GRPC)
    astarte_sdk_add_grpc_options()
else()
    # TODO
endif()

message(STATUS "--------------------------------------------------")

# --- Generic Dependencies ---
set(SPDLOG_GITHUB_URL https://github.com/gabime/spdlog.git)
set(SPDLOG_GIT_TAG v1.15.1)
FetchContent_Declare(
  spdlog
  GIT_REPOSITORY ${SPDLOG_GITHUB_URL}
  GIT_TAG        ${SPDLOG_GIT_TAG}
  SYSTEM
)
FetchContent_MakeAvailable(spdlog)

if(ASTARTE_TRANSPORT_GRPC)
    astarte_sdk_configure_grpc_dependencies()
else()
    # TODO
endif()

# --- Core Library Target Definition ---
add_library(astarte_device_sdk)
target_compile_features(astarte_device_sdk PUBLIC cxx_std_17)
target_include_directories(astarte_device_sdk PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include)
target_include_directories(astarte_device_sdk PRIVATE ${CMAKE_CURRENT_LIST_DIR}/private)
file(GLOB astarte_sdk_src "${CMAKE_CURRENT_LIST_DIR}/src/*.cpp")
target_sources(astarte_device_sdk PRIVATE ${astarte_sdk_src})

# Link generic dependencies
if(ASTARTE_PUBLIC_SPDLOG_DEP)
    target_link_libraries(astarte_device_sdk PUBLIC spdlog::spdlog $<$<BOOL:${MINGW}>:ws2_32>)
else()
    target_link_libraries(astarte_device_sdk PRIVATE spdlog::spdlog $<$<BOOL:${MINGW}>:ws2_32>)
endif()

# Apply generic compile definitions
if(ASTARTE_ENABLE_FORMAT)
    target_compile_definitions(astarte_device_sdk PUBLIC ASTARTE_FORMAT_ENABLED)
endif()

if(ASTARTE_TRANSPORT_GRPC)
    target_compile_definitions(astarte_device_sdk PUBLIC ASTARTE_TRANSPORT_GRPC)
    astarte_sdk_add_grpc_transport()
else()
    # TODO
endif()

# --- Generic Installation Rules ---
file(GLOB_RECURSE SDK_PUBLIC_HEADERS "${CMAKE_CURRENT_LIST_DIR}/include/*.hpp")

set_target_properties(astarte_device_sdk
    PROPERTIES
        PUBLIC_HEADER "${SDK_PUBLIC_HEADERS}"
        POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}
)

install(
    TARGETS astarte_device_sdk
    EXPORT astarte_device_sdk
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/astarte_device_sdk
)

if(ASTARTE_TRANSPORT_GRPC)
    astarte_sdk_install_grpc_pkgconfig()
else()
    # TODO
endif()
